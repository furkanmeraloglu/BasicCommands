{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww37900\viewh19680\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
Git Versiyon Takip Sistemi \
\
\
	git init \
\
- >	komutu ile versiyon takip sistemi ba\uc0\u351 latmak istedi\u287 imiz dosyada bir versiyon takibi ba\u351 lat\u305 yoruz. \
\
	git status \
\
- >	komutunu kullanarak versiyon takip sistemi ba\uc0\u351 latt\u305 \u287 \u305 m\u305 z dosyan\u305 n mevcut durumunu g\'f6r\'fcnt\'fcl\'fcyoruz. \
\
	git add -A\
\
- >	komutu ile versiyon takip sistemi ba\uc0\u351 latt\u305 \u287 \u305 m\u305 z \'e7al\u305 \u351 ma klas\'f6r\'fcndeki yeni yarat\u305 lm\u305 \u351  ya da de\u287 i\u351 ikli\u287 e u\u287 ram\u305 \u351  t\'fcm dosyalar\u305  sahneye al\u305 yoruz (staging). Dosyalar\u305  stage\'92e ald\u305 ktan sonra tekrar status kontrol\'fc yaparak commit ihtiyac\u305  olup olmad\u305 \u287 \u305 n\u305  kontrol edebiliriz. \
\
	git commit -m \'93Initial Commit\'94 \
\
- >	komutu ile takip sistemi ba\uc0\u351 latt\u305 \u287 \u305 m\u305 z klas\'f6r\'fcm\'fcz\'fcn ilk commitini yap\u305 yoruz. Genellikle ilk commit ismini \'93Initial commit\'94 olarak belirtilir. Ancak herhangi bir commit ismi de kullan\u305 labilir. Commit ettikten sonra stat\'fc kontrol\'fc yap\u305 labilir. \
\
	git checkout - - . \
\
- >	komutu ile yereldeki deponun son commit\'92\uc0\u304 ne s\u305 f\u305 rlama yapabiliriz. \u304 ki Tire\'92den sonra nokta koyarsak t\'fcm klas\'f6r\'fc eski commit haline getirir. Ancak \'f6zellikle bir dosya \'fczerinde yap\u305 lan de\u287 i\u351 iklikleri eskiye d\'f6nd\'fcrmek istiyorsak nokta yerine direkt olarak dosya ismi de yaz\u305 labilir. \
\
- >	Git versiyon takibinde bir proje \'fczerinde \'e7al\uc0\u305 \u351 \u305 rken branchleri kullanmak \'e7ok \'f6nemli. Projenin belirli bir b\'f6l\'fcm\'fcnde yapt\u305 \u287 \u305 m\u305 z de\u287 i\u351 ikliklerin ana projenin yay\u305 n ak\u305 \u351 \u305 na bir engel olu\u351 turmas\u305 n\u305  istemeyiz. Bu sebeple ana projenin i\u351 leyi\u351 ini bozmayacak \u351 ekilde proje i\'e7indeki baz\u305  noktalarda yapt\u305 \u287 \u305 m\u305 z de\u287 i\u351 iklikler i\'e7in farkl\u305  branch ( dallar ) kullan\u305 r\u305 z.\
	Yapt\uc0\u305 \u287 \u305 m\u305 z i\u351 lemler sona erdikten sonra da olu\u351 turdu\u287 umuz farkl\u305  dallar\u305  tekrar ana projemizle birle\u351 tiririz. \
\
- > 	Olu\uc0\u351 turdu\u287 umuz branchler \'fczerinden de istedi\u287 imiz kadar dal \'e7\u305 karabiliriz. \u304 stedi\u287 imiz dal\u305 n istedi\u287 imiz noktas\u305 ndan bir k\u305 r\u305 l\u305 m yarat\u305 p, istedi\u287 imiz zaman da istedi\u287 imiz dallar\u305  birle\u351 tirebilir, ortadan kald\u305 rabilir ve ya g\'fcncellemeler yapabiliriz. \
\
	git checkout -b dev \
\
- > 	Komutu master \'fczerinde yeni bir branch olu\uc0\u351 turup o branch\'92e ge\'e7i\u351  yapar. Bu komut \u351 u demektir; ben dev isimli branch\'92e ge\'e7mek istiyorum. Dev\'92in i\'e7indeyken yeni bir dosya olu\u351 turuyoruz. Olu\u351 turdu\u287 um txt dosyas\u305 na bir \u351 eyler yaz\u305 yoruz. Yapt\u305 \u287 \u305 m\u305 z de\u287 i\u351 iklikleri dev branch\'92ine commitliyoruz. Sonras\u305 nda; \
\
	git switch master \
\
- > 	Komutuyla master branch\'92ine ge\'e7ince dev branchinde yaratt\uc0\u305 \u287 \u305 m\u305 z dev.txt dosyas\u305  git status\'92da g\'f6z\'fckm\'fcyor. Peki dev branch\'92teki i\u351 im bittikten sonra master ile dev\'92i birle\u351 tirmek isteyince; \
\
	git merge dev\
\
- > 	komutunu master branch\'92inde \'e7al\uc0\u305 \u351 t\u305 r\u305 nca dev dal\u305 n\u305  master dal\u305 na ekliyor ve projeyi birle\u351 tiriyoruz. \
\
- > 	Git versiyon takip sistemini yereldeki dosyalar\uc0\u305 n takibi i\'e7in de kullanabiliriz. Ayr\u305 ca, bu sistemin as\u305 l art\u305 s\u305 , insanlarla projelerimizi payla\u351 mak i\'e7in GitHub \'fczerinden bir repository a\'e7arak buradan da versiyon takibinde olan dosyalar\u305 m\u305 z\u305  payla\u351 abiliriz. Bu sayede projeleri insanlarla ortak y\'fcr\'fctebiliriz. \
\
- > 	Kendi yerel depomuzdaki takipli dosyalar\uc0\u305 m\u305 z\u305  sunucu \'fczerindeki uzak depomuza itiyoruz. (Push) Bunu yapmak i\'e7in \'f6ncelikle GitHub \'fczerinden bir repository a\'e7mam\u305 z gerekiyor. Sonras\u305 nda versiyon takip sistemi ba\u351 latt\u305 \u287 \u305 m\u305 z yerel dosyam\u305 za girerek; \
\
	git remote add origin \'93repository link\'94 \
\
- > 	Diyerek yerel ortam\uc0\u305 m\u305 zdaki versiyon takibiyle GitHub \'fczerindeki depomuzu e\u351 liyoruz. Sonras\u305 nda ise; \
\
	git push \
\
- > 	Diyerek yerel depomuzda commit etti\uc0\u287 imiz t\'fcm dosyalar\u305 m\u305 z\u305  GitHub deposuna yolluyoruz. \
\
\
Peki GitHub \'fczerinde olu\uc0\u351 turulmu\u351  bir projede ortak \'e7al\u305 \u351 may\u305  nas\u305 l y\'fcr\'fct\'fcr\'fcz? Remote git depodan bir projeyi yerelimize \'e7ekerek yapt\u305 \u287 \u305 m\u305 z de\u287 i\u351 iklikleri yetkimiz do\u287 rultusunda remote\'92a commitlemek.  \
\
- > 	Remote olu\uc0\u351 turulan depomuzda ba\u351 ka birisine yetki vermek i\'e7in; \
		\
		\'97 Settings / Manage Access / Invite a Collaborator\
 \
- > 	Bu i\uc0\u351 lemden sonra davet etti\u287 imiz ki\u351 iye bir e-posta gidiyor. Kar\u351 \u305  taraf daveti kabul edince, o taraf\u305 n olu\u351 turmad\u305 \u287 \u305  ba\u351 kas\u305 n\u305 n olu\u351 turdu\u287 u bir depoda ortak \'e7al\u305 \u351 ma yap\u305 labilir. Bunun i\'e7in de collaborator git deposunun linkini kopyalayarak terminalinde \u351 u komutu \'e7al\u305 \u351 t\u305 r\u305 yor; \
\
	git clone \'93proje GitHub linki\'94\
\
- > 	Collaborator yapt\uc0\u305 \u287 \u305  de\u287 i\u351 iklikleri git add -A komutu ile sahneye al\u305 r, git commit -m \'93Collaborator edit\'94 komutuyla commtiler ve sonras\u305 nda git push diyerek remote depoya yolluyor. \
\
\
 ** 	Peki ayn\uc0\u305  isimde yarat\u305 lan dosyalar\u305 n i\'e7eri\u287 inde bir \'e7ak\u305 \u351 ma olursa ne olur? Collaboratorlar ayn\u305  isimdeki dosyada farkl\u305  i\'e7erikler \'fcretebilirler. Peki bu durumda hangi de\u287 i\u351 iklik ge\'e7erli olacak? Bu tarzda ola\u287 an ak\u305 \u351 \u305 n k\u305 r\u305 ld\u305 \u287 \u305  durumlarda \'93merge conflict\'94 devreye giriyor. \
\
	Ancak ayn\uc0\u305  isimdeki dosyan\u305 n ayn\u305  sat\u305 r\u305 ndaki kodlarda olu\u351 an farkl\u305 l\u305 klarda merge conflict yapam\u305 yor. Peki ne oluyor? \
\
	Dosyay\uc0\u305  ilk olu\u351 turan\u305 n yapt\u305 \u287 \u305  de\u287 i\u351 iklikler <<<<<< HEAD >>>>> olarak belirtilip ayn\u305  dosya i\'e7erisinde belirtiliyor. Bu tarz conflict durumlar\u305 nda git sistemi bu sorunu collaboratorlarin \'e7\'f6zmesini bekliyor. \
\
\
\
\
}